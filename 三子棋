//测试代码
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include"game.h"
//测试三子棋游戏

//菜单栏
void menu()
{
    printf("************************\n");
    printf("****1、play  0、exit****\n");
    printf("************************\n");
}

//游戏的整个算法实现
void game()
{
    char ret=0;
    //数组存放走出的棋盘信息
    char board[ROW][COL]={0};//全部是空格
    //初始化棋盘
    InitBoard(board,ROW,COL);
    //打印棋盘
    DisplayBoard(board,ROW,COL);
    //开始下棋
    while(1)
    {
        //玩家下棋
        PlayerMove(board,ROW,COL);
        DisplayBoard(board,ROW,COL);
        //判断玩家是否赢
        ret=Iswin(board,ROW,COL);
        if(ret!='C')
        {
            break;
        }
        //电脑下棋
        ComputerMove(board,ROW,COL);
        DisplayBoard(board,ROW,COL);
        //判断电脑是否赢
        ret=Iswin(board,ROW,COL);
        if(ret!='C')
        {
            break;
        }
    }
    if(ret=='*')
    {
        printf("玩家赢\n");
    }
    else if(ret=='#')
    {
        printf("电脑赢\n");
    }
    else
    {
        printf("平局\n");
    }
}

void test()
{
    int input=0;
    srand((unsigned int)time(NULL));
    do
    {
        menu();
        printf("请选择:");
        scanf("%d",&input);
        switch (input)
        {
        case 1:
            printf("三子棋\n");
            game();
            break;
        case 0:
            printf("退出游戏\n");
            break;
        default:
            printf("选择错误,请重新选择！\n");
            break;
        }
    } while (input);
    
}
int main()
{
    test();
    system("pause");
    return 0;
} 





//头文件
#define ROW 3
#define COL 3

//声明
void InitBoard(char board[ROW][COL],int row,int col);

//声明函数
void DisplayBoard(char board[ROW][COL],int row,int col);

//声明玩家下棋的函数
void PlayerMove(char board[ROW][COL],int row,int col);

//声明电脑下棋的函数
void ComputerMove(char board[ROW][COL],int row,int col);

//声明输赢，告诉我们四种游戏状态
//玩家赢     '*'
//电脑赢     '#'
//平局       'Q'
//谁都没赢，游戏继续  'C'
char Iswin(char board[ROW][COL],int row,int col);








//游戏函数
#include<stdlib.h>
#include<stdio.h>
#include"game.h"

void InitBoard(char board[ROW][COL],int row,int col)
{
    int i=0;
    int j=0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            board[i][j]=' ';
        }
    }
}

void DisplayBoard(char board[ROW][COL],int row,int col)
{
    int i=0;
    for(i=0;i<row;i++)
    {
        int j=0;
        for(j=0;j<col;j++)
        {
            //1、打印第一行的数据：空格，字符加竖杠循环。
            printf(" %c ",board[i][j]);
            if(j<col-1)
                printf("|");
        }
        printf("\n");
        //2、打印分割行
        if(i<row-1)
        {
            for(j=0;j<col;j++)
            {
                printf("---");
                if(j<col-1)
                {
                    printf("|");
                }
            }
            printf("\n");
        }
    }
}
//太暴力了
// {
//     int i=0;
//     for(i=0;i<row;i++)
//     {
//         //1、第一很输出数据
//         printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
//         //2、第二行分隔符
//         if(i<row-1)
//         printf("---|---|---\n");
//     }
// }

//玩家下棋
void PlayerMove(char board[ROW][COL],int row,int col)
{
    int x=0;
    int y=0;
    printf("玩家走:\n");
    while(1)
    {
        printf("请输入要下的坐标:");
        scanf("%d,%d",&x,&y);
        //判断x，y坐标的合法性
        if (x>=1&&x<=row&&y>=1&&y<=col)
        {
            if(board[x-1][y-1]==' ')
            {
                board[x-1][y-1]='*';
                break;
            }
            else
            {
                printf("该坐标被占用\n");
            }
        }
        else
        {
            printf("坐标非法,请重新输入:\n");
        }
    }
}

//电脑下棋
void ComputerMove(char board[ROW][COL],int row,int col)
{
    int x=0;
    int y=0;
    printf("电脑走:\n");
    while(1)
    {
        x=rand()%row;
        y=rand()%col;
        if(board[x][y]==' ')
        {
            board[x][y]='#';
            break;
        }
    }
}

//判断棋盘是否占满
//返回1表示棋盘满了
//返回0表示棋盘没满
char IsFull(char board[ROW][COL],int row,int col)
{
    int i=0;
    int j=0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            if(board[i][j]==' ')
            {
                return 0;//没满
            }
        }
    }
    return 1;//满了
}

//判断几个状态
char Iswin(char board[ROW][COL],int row,int col)
{
    int i=0;
    //横三行
    for(i=0;i<row;i++)
    {
        if(board[i][0]==board[i][1]&&board[i][1]==board[i][2]&&board[i][1]!=' ')
        {
            return board[i][1];
        }
    }
    //竖三列
    for(i=0;i<col;i++)
    {
        if(board[0][i]==board[1][i]&&board[1][i]==board[2][i]&&board[1][i]!=' ')
        {
            return board[1][i];
        }
    }
    //斜着 两个对角线
    if(board[0][0]==board[1][1]&&board[1][1]==board[2][2]&&board[1][1]!=' ')
    {
        return board[1][1];
    }
    if(board[2][0]==board[1][1]&&board[1][1]==board[0][2]&&board[1][1]!=' ')
    {
        return board[1][1];
    }
    //判断是否平局
    if(IsFull(board,ROW,COL)==1)
    {
        return 'Q';
    }
    return 'C';
}


