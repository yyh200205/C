//改变变量的内容
int main()
{
	int a = 0x11223344;
	int* pa = &a;
	*pa = 0;
	printf("%d", a);
	return 0;
}

//根据数据类型所占的字节更改数据
int main()
{
	int a = 0x11223344;
	printf("%d\n", a);
	char* pa = (char*)&a;
	*pa = 0;
	printf("%d\n", a);
	return 0;
}

//用数组指针去更改数组中数据的内容
//用指针更改数组数据的内容
int main()
{
	int arr[10] = { 0 };
	int* p = arr;//首字母的地址
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*(p + i) = 1;
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

//指针的越界访问
int main()
{
	int arr[10]={0};
	int* p=arr;
	for(int i=0;i<12;i++)//12已经超过了数组原有的内存
	{
		*(p++)=1;
	}
	return 0;
}

//当a的地址传下来的时候，a已经被销毁，更改p变量的地址，只能指向空。
//指针指向的空间释放
int* test()
{
	int a = 10;
	return &a;
}
int main()
{
	int* p=test();
	*p = 20;
	return 0;
}
